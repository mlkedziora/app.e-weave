generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id         String             @id @default(cuid())
  name       String             @unique
  members    TeamMember[]
  projects   Project[]
  materials  Material[]
  categories MaterialCategory[]
  createdAt  DateTime           @default(now())
}

model TeamMember {
  id                 String              @id @default(cuid())
  userId             String              @unique
  name               String
  role               String
  position           String?
  startDate          DateTime?
  endDate            DateTime?
  teamId             String
  imageUrl           String?             // New: For profile image
  team               Team                @relation(fields: [teamId], references: [id])
  assignedTasks      TaskAssignee[]
  givenTasks         Task[]              @relation("GivenTasks")
  materialHistories  MaterialHistory[]
  performanceMetrics PerformanceMetric[]
  growthForecasts    GrowthForecast[]
  materialNotes      MaterialNote[]
  projectNotes       ProjectNote[]
  assignedProjects   ProjectAssignee[]
}

model Project {
  id                String            @id @default(cuid())
  name              String
  description       String?
  imageUrl          String?
  startDate         DateTime?
  deadline          DateTime?
  teamId            String
  team              Team              @relation(fields: [teamId], references: [id])
  tasks             Task[]
  assignedMaterials ProjectMaterial[]
  notes             ProjectNote[]
  assignees         ProjectAssignee[]
  createdAt         DateTime          @default(now())
}

model Task {
  id          String    @id @default(cuid())
  name        String
  progress    Int       @default(0)
  startedAt   DateTime
  deadline    DateTime?
  completedAt DateTime?

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  assignedById String
  assignedBy   TeamMember @relation("GivenTasks", fields: [assignedById], references: [id])

  subtasks Subtask[]
  assignees TaskAssignee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subtask {
  id        String  @id @default(cuid())
  name      String
  completed Boolean @default(false)
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
}

model TaskAssignee {
  taskId       String
  teamMemberId String
  task         Task       @relation(fields: [taskId], references: [id])
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])

  @@id([taskId, teamMemberId])
}

model ProjectAssignee {
  projectId    String
  teamMemberId String
  project      Project    @relation(fields: [projectId], references: [id])
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])

  @@id([projectId, teamMemberId])
}

model PerformanceMetric {
  id          String     @id @default(cuid())
  memberId    String
  member      TeamMember @relation(fields: [memberId], references: [id])
  score       Float
  completedAt DateTime?
  notes       String?
  createdAt   DateTime   @default(now())
}

model GrowthForecast {
  id                    String     @id @default(cuid())
  memberId              String
  member                TeamMember @relation(fields: [memberId], references: [id])
  forecastFor           DateTime
  projectedAvgDeviation Float
  projectedRole         String?
  rationale             String?
  createdAt             DateTime   @default(now())
}

model Material {
  id               String    @id @default(cuid())
  name             String
  imageUrl         String?
  categoryId       String
  fiber            String
  length           Float
  width            Float
  gsm              Float
  color            String
  texture          String
  origin           String
  supplier         String
  productCode      String
  purchaseLocation String
  datePurchased    DateTime?
  pricePerMeter    Float
  certifications   String?
  teamId           String

  team     Team             @relation(fields: [teamId], references: [id])
  category MaterialCategory @relation(fields: [categoryId], references: [id])

  history       MaterialHistory[]
  assignedTo    ProjectMaterial[]
  materialNotes MaterialNote[]
  climateChange               Float? @default(0.0) // kg CO₂-eq
  ozoneDepletion              Float? @default(0.0) // kg CFC-11-eq
  humanToxicityCancer         Float? @default(0.0) // CTUh
  humanToxicityNonCancer      Float? @default(0.0) // CTUh
  particulateMatter           Float? @default(0.0) // disease incidence
  ionisingRadiation           Float? @default(0.0) // kBq U-235-eq
  photochemicalOzoneFormation Float? @default(0.0) // kg NMVOC-eq
  acidification               Float? @default(0.0) // mol H+-eq
  terrestrialEutrophication   Float? @default(0.0) // mol N-eq
  freshwaterEutrophication    Float? @default(0.0) // kg P-eq
  marineEutrophication        Float? @default(0.0) // kg N-eq
  freshwaterEcotoxicity       Float? @default(0.0) // CTUe
  landUse                     Float? @default(0.0) // species-yr
  waterScarcity               Float? @default(0.0) // m³ world-eq
  mineralResourceDepletion    Float? @default(0.0) // kg Sb-eq
  fossilResourceDepletion     Float? @default(0.0) // MJ
  eScore                      Float  @default(0.0)
}

model MaterialCategory {
  id        String     @id @default(cuid())
  name      String
  teamId    String
  team      Team       @relation(fields: [teamId], references: [id])
  materials Material[]
}

model MaterialHistory {
  id             String     @id @default(cuid())
  materialId     String
  teamMemberId   String
  previousLength Float
  newLength      Float
  changedAt      DateTime   @default(now())
  material       Material   @relation(fields: [materialId], references: [id])
  teamMember     TeamMember @relation(fields: [teamMemberId], references: [id])
}

model ProjectMaterial {
  id         String   @id @default(cuid())
  projectId  String
  materialId String
  project    Project  @relation(fields: [projectId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])
}

model MaterialNote {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  material     Material   @relation(fields: [materialId], references: [id])
  materialId   String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String
}

model ProjectNote {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  project      Project    @relation(fields: [projectId], references: [id])
  projectId    String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String
}