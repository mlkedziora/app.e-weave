generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id         String             @id @default(cuid())
  name       String
  members    TeamMember[]
  projects   Project[]
  materials  Material[]
  categories MaterialCategory[]
  createdAt  DateTime           @default(now())
}

model TeamMember {
  id        String    @id @default(cuid())
  userId    String    @unique // Clerk user ID
  name      String
  role      String // 'admin' | 'manager' | 'member'
  position  String?
  startDate DateTime?
  endDate   DateTime?
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])

  // Relationships
  tasks              Task[]
  materialHistories  MaterialHistory[]
  performanceMetrics PerformanceMetric[]
  growthForecasts    GrowthForecast[]
}

model PerformanceMetric {
  id          String     @id @default(cuid())
  memberId    String
  member      TeamMember @relation(fields: [memberId], references: [id])
  score       Float // e.g. composite performance score
  completedAt DateTime?
  notes       String?
  createdAt   DateTime   @default(now())
}

model GrowthForecast {
  id                    String     @id @default(cuid())
  memberId              String
  member                TeamMember @relation(fields: [memberId], references: [id])
  forecastFor           DateTime // future month/quarter
  projectedAvgDeviation Float // future task deviation
  projectedRole         String?
  rationale             String?
  createdAt             DateTime   @default(now())
}

model Project {
  id                String            @id @default(cuid())
  name              String
  description       String?
  startDate         DateTime?
  deadline          DateTime?
  notes             String?
  teamId            String
  team              Team              @relation(fields: [teamId], references: [id])
  tasks             Task[]
  assignedMaterials ProjectMaterial[]
  createdAt         DateTime          @default(now())
}

model Task {
  id             String     @id @default(cuid())
  name           String
  projectId      String
  assigneeId     String
  estimatedHours Float? // ‚è± What the system/manager expects
  startedAt      DateTime? // üü¢ When work actually began
  completedAt    DateTime? // üî¥ When the task was marked done
  progress       Float      @default(0)
  project        Project    @relation(fields: [projectId], references: [id])
  assignee       TeamMember @relation(fields: [assigneeId], references: [id])
  createdAt      DateTime   @default(now())
}

model Material {
  id               String            @id @default(cuid())
  name             String
  categoryId       String
  fiber            String
  length           Float // in meters
  width            Float // in cm
  gsm              Float // grams per square meter
  color            String
  texture          String
  origin           String
  supplier         String
  productCode      String
  purchaseLocation String
  datePurchased    DateTime?
  pricePerMeter    Float
  certifications   String?
  notes            String?
  teamId           String
  team             Team              @relation(fields: [teamId], references: [id])
  category         MaterialCategory  @relation(fields: [categoryId], references: [id])
  history          MaterialHistory[]
  assignedTo       ProjectMaterial[]
}

model MaterialCategory {
  id        String     @id @default(cuid())
  name      String
  materials Material[]
  teamId    String
  team      Team       @relation(fields: [teamId], references: [id])
}

model MaterialHistory {
  id             String     @id @default(cuid())
  materialId     String
  teamMemberId   String
  previousLength Float
  newLength      Float
  changedAt      DateTime   @default(now())
  material       Material   @relation(fields: [materialId], references: [id])
  teamMember     TeamMember @relation(fields: [teamMemberId], references: [id])
}

model ProjectMaterial {
  id         String   @id @default(cuid())
  projectId  String
  materialId String
  project    Project  @relation(fields: [projectId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])
}
